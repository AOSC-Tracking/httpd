<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr"><head>
<meta content="text/html; charset=ISO-8859-1" http-equiv="Content-Type" />
<!--
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
              This file is generated from xml source: DO NOT EDIT
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -->
<title>D&#233;tails techniques sur le module Apache mod_rewrite - Serveur Apache HTTP Version 2.2</title>
<link href="../style/css/manual.css" rel="stylesheet" media="all" type="text/css" title="Main stylesheet" />
<link href="../style/css/manual-loose-100pc.css" rel="alternate stylesheet" media="all" type="text/css" title="No Sidebar - Default font size" />
<link href="../style/css/manual-print.css" rel="stylesheet" media="print" type="text/css" /><link rel="stylesheet" type="text/css" href="../style/css/prettify.css" />
<script src="../style/scripts/prettify.min.js" type="text/javascript">
</script>

<link href="../images/favicon.ico" rel="shortcut icon" /><link href="http://httpd.apache.org/docs/current/rewrite/tech.html" rel="canonical" /></head>
<body id="manual-page"><div id="page-header">
<p class="menu"><a href="../mod/">Modules</a> | <a href="../mod/directives.html">Directives</a> | <a href="http://wiki.apache.org/httpd/FAQ">FAQ</a> | <a href="../glossary.html">Glossaire</a> | <a href="../sitemap.html">Plan du site</a></p>
<p class="apache">Serveur Apache HTTP Version 2.2</p>
<img alt="" src="../images/feather.gif" /></div>
<div class="up"><a href="./"><img title="&lt;-" alt="&lt;-" src="../images/left.gif" /></a></div>
<div id="path">
<a href="http://www.apache.org/">Apache</a> &gt; <a href="http://httpd.apache.org/">Serveur HTTP</a> &gt; <a href="http://httpd.apache.org/docs/">Documentation</a> &gt; <a href="../">Version 2.2</a> &gt; <a href="./">Rewrite</a></div><div id="page-content"><div class="retired"><h4>A savoir</h4>
            <p>Ce document concerne une version ancienne (<strong>2.2</strong>)
	    du serveur HTTP Apache. La version actuelle est
	    document&#233;e <a href="http://httpd.apache.org/docs/current">ici</a>. Si vous n'avez
	    pas encore effectu&#233; la mise &#232; jour, veuillez suivre <a href="http://httpd.apache.org/docs/current/upgrading.html">ce
	    lien</a> pour plus d'informations.</p>
        <p>Pour consulter la version actuelle de ce
	document, vous pouvez suivre <a href="http://httpd.apache.org/docs/current/rewrite/tech.html">ce lien</a>.</p></div><div id="preamble"><h1>D&#233;tails techniques sur le module Apache mod_rewrite</h1>
<div class="toplang">
<p><span>Langues Disponibles: </span><a href="../en/rewrite/tech.html" hreflang="en" rel="alternate" title="English">&nbsp;en&nbsp;</a> |
<a href="../fr/rewrite/tech.html" title="Fran&#231;ais">&nbsp;fr&nbsp;</a></p>
</div>

<p>Ce document passe en revue certains d&#233;tails techniques &#224; propos du
module mod_rewrite et de la mise en correspondance des URLs</p>
</div>
<div id="quickview"><ul id="toc"><li><img alt="" src="../images/down.gif" /> <a href="#Internal">Fonctionnement interne</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#InternalAPI">Phases de l'API</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#InternalRuleset">Traitement du jeu de r&#232;gles</a></li>
</ul><h3>Voir aussi</h3><ul class="seealso"><li><a href="../mod/mod_rewrite.html">Documentation du module mod_rewrite</a></li><li><a href="intro.html">Introduction &#224; mod_rewrite</a></li><li><a href="remapping.html">Redirection et remise en
correspondance</a></li><li><a href="access.html">Contr&#244;le d'acc&#232;s</a></li><li><a href="vhosts.html">Serveurs virtuels</a></li><li><a href="proxy.html">Mise en cache</a></li><li><a href="rewritemap.html">Utilisation de RewriteMap</a></li><li><a href="advanced.html">Techniques avanc&#233;es et astuces</a></li><li><a href="avoid.html">Quand ne pas utiliser mod_rewrite</a></li></ul><ul class="seealso"><li><a href="#comments_section">Commentaires</a></li></ul></div>
<div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="Internal" id="Internal">Fonctionnement interne</a></h2>

      <p>Le fonctionnement interne de ce module est tr&#232;s complexe, mais
      il est n&#233;cessaire de l'expliquer, m&#234;me &#224; l'utilisateur "standard",
      afin d'&#233;viter les erreurs courantes et de pouvoir exploiter toutes
      ses fonctionnalit&#233;s.</p>
</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="InternalAPI" id="InternalAPI">Phases de l'API</a></h2>

      <p>Il faut tout d'abord bien comprendre que le traitement d'une
      requ&#234;te HTTP par Apache s'effectue en plusieurs phases. L'API
      d'Apache fournit un point d'accroche (hook) pour chacune de ces
      phases. Mod_rewrite utilise deux de ces hooks : le hook de
      conversion des URLs en noms de fichiers qui est utilis&#233; quand la
      requ&#234;te HTTP a &#233;t&#233; lue mais avant le d&#233;marrage de tout processus
      d'autorisation, et le hook "Fixup" qui est d&#233;clench&#233; apr&#232;s les
      phases d'autorisation et apr&#232;s la lecture des fichiers de
      configuration niveau r&#233;pertoire (<code>.htaccess</code>), mais
      avant que le gestionnaire de contenu soit activ&#233;.</p>

      <p>Donc, lorsqu'une requ&#234;te arrive et quand Apache a d&#233;termin&#233; le
      serveur correspondant (ou le serveur virtuel), le moteur de
      r&#233;&#233;criture commence le traitement de toutes les directives de
      mod_rewrite de la configuration du serveur principal dans la phase
      de conversion URL vers nom de fichier. Une fois ces &#233;tapes
      franchies, lorsque les repertoires de donn&#233;es finaux ont &#233;t&#233;
      trouv&#233;s, les directives de configuration de mod_rewrite au niveau
      r&#233;pertoire sont &#233;x&#233;cut&#233;es dans la phase Fixup. Dans les deux cas,
      mod_rewrite r&#233;&#233;crit les URLs soit en nouvelles URLs, soit en noms
      de fichiers, bien que la distinction entre les deux ne soit pas
      &#233;vidente. Cette utilisation de l'API n'&#233;tait pas sens&#233;e s'op&#233;rer
      de cette mani&#232;re lorsque l'API fut con&#231;ue, mais depuis Apache 1.x,
      c'est le seul mode op&#233;ratoire possible pour mod_rewrite. Afin de
      rendre les choses plus claires, souvenez-vous de ces deux points :</p>

      <ol>
        <li>Bien que mod_rewrite r&#233;&#233;crive les URLs en URLs, les URLs en
	noms de fichiers et m&#234;me des noms de fichiers en d'autres noms
	de fichiers, l'API ne propose actuellement qu'un hook URL vers
	nom de fichier. Les deux hooks manquants seront ajout&#233;s dans
	Apache &#224; partir de la version 2.0 afin de rendre le processus
	plus clair. Mais ce point ne pr&#233;sente pas d'inconv&#233;nient pour
	l'utilisateur, il s'agit simplement d'un fait que vous devez
	garder &#224; l'esprit : Apache en fait plus avec le hook URL vers
	nom de fichier que l'API n'a la pr&#233;tention d'en faire.</li>

        <li>
          Paradoxalement, mod_rewrite permet la manipulation d'URLs dans
	  un contexte de r&#233;pertoire, <em>c'est &#224; dire</em> dans les
	  fichiers <code>.htaccess</code>, bien que ces derniers
	  soient trait&#233;s bien longtemps apr&#232;s que les URLs n'aient &#233;t&#233;
	  traduites en noms de fichiers. Les choses doivent se d&#233;rouler
	  ainsi car les fichiers <code>.htaccess</code> r&#233;sident dans le
	  syst&#232;me de fichiers, et le traitement a d&#233;j&#224; atteint
	  cette &#233;tape. Autrement dit, en accord avec les phases de
	  l'API, &#224; ce point du traitement, il est trop tard pour
	  effectuer des manipulations d'URLs. Pour r&#233;soudre ce probl&#232;me
	  d'ant&#233;riorit&#233;, mod_rewrite utilise une astuce : pour effectuer
	  une manipulation URL/nom de fichier dans un contexte de
	  r&#233;pertoire, mod_rewrite r&#233;&#233;crit tout d'abord le nom de fichier
	  en son URL d'origine (ce qui est normalement impossible, mais
	  voir ci-dessous l'astuce utilis&#233;e par la directive
	  <code>RewriteBase</code> pour y parvenir), puis
	  initialise une nouvelle sous-requ&#234;te interne avec la nouvelle
	  URL ; ce qui a pour effet de red&#233;marrer le processus des
	  phases de l'API.

          <p>Encore une fois, mod_rewrite fait tout ce qui est en son
	  pouvoir pour rendre la complexit&#233; de cette &#233;tape compl&#232;tement
	  transparente &#224; l'utilisateur, mais vous devez garder ceci &#224;
	  l'esprit : alors que les manipulations d'URLs dans le contexte
	  du serveur sont vraiment rapides et efficaces, les r&#233;&#233;critures
	  dans un contexte de r&#233;pertoire sont lentes et inefficaces &#224;
	  cause du probl&#232;me d'ant&#233;riorit&#233; pr&#233;cit&#233;. Cependant, c'est la
	  seule mani&#232;re dont mod_rewrite peut proposer des manipulations
	  d'URLs (limit&#233;es &#224; une branche du syst&#232;me de fichiers) &#224;
	  l'utilisateur standard.</p>
        </li>
      </ol>

      <p>Ne perdez pas de vue ces deux points!</p>
</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="InternalRuleset" id="InternalRuleset">Traitement du jeu de r&#232;gles</a></h2>

      <p>Maintenant, quand mod_rewrite se lance dans ces deux phases de
      l'API, il lit le jeu de r&#232;gles configur&#233;es depuis la structure
      contenant sa configuration (qui a &#233;t&#233; elle-m&#234;me cr&#233;&#233;e soit au
      d&#233;marrage d'Apache pour le contexte du serveur, soit lors du
      parcours des r&#233;pertoires par le noyau d'Apache pour le contexte de
      r&#233;pertoire). Puis le moteur de r&#233;&#233;criture est d&#233;marr&#233; avec le jeu
      de r&#232;gles contenu (une ou plusieurs r&#232;gles associ&#233;es &#224; leurs
      conditions). En lui-m&#234;me, le mode op&#233;ratoire du moteur de
      r&#233;&#233;criture d'URLs est exactement le m&#234;me dans les deux contextes
      de configuration. Seul le traitement du r&#233;sultat final diff&#232;re.</p>

      <p>L'ordre dans lequel les r&#232;gles sont d&#233;finies est important car
      le moteur de r&#233;&#233;criture les traite selon une chronologie
      particuli&#232;re (et pas tr&#232;s &#233;vidente). Le principe est le suivant :
      le moteur de r&#233;&#233;criture traite les r&#232;gles (les directives <code class="directive"><a href="../mod/mod_rewrite.html#rewriterule">RewriteRule</a></code>) les unes
      &#224; la suite des autres, et lorsqu'une r&#232;gle s'applique, il parcourt
      les &#233;ventuelles conditions (directives
      <code>RewriteCond</code>directives) associ&#233;es.
      Pour des raisons historiques, les
      conditions pr&#233;c&#232;dent les r&#232;gles, si bien que le d&#233;roulement du
      contr&#244;le est un peu compliqu&#233;. Voir la figure 1 pour plus de
      d&#233;tails.</p>
<p class="figure">
      <img src="../images/rewrite_rule_flow.png" alt="Flux des comparaisons des directives RewriteRule et RewriteCond" /><br />
      <dfn>Figure 1:</dfn>D&#233;roulement du contr&#244;le &#224; travers le jeu de
      r&#232;gles de r&#233;&#233;criture
</p>
      <p>Comme vous pouvez le voir, l'URL est tout d'abord compar&#233;e au
      <em>Mod&#232;le</em> de chaque r&#232;gle. Lorsqu'une r&#232;gle ne s'applique
      pas, mod_rewrite stoppe imm&#233;diatement le traitement de cette r&#232;gle
      et passe &#224; la r&#232;gle suivante. Si l'URL correspond au
      <em>Mod&#232;le</em>, mod_rewrite recherche la pr&#233;sence de conditions
      correspondantes. S'il n'y en a pas, mod_rewrite remplace
      simplement l'URL par une cha&#238;ne &#233;labor&#233;e &#224; partir de la cha&#238;ne de
      <em>Substitution</em>, puis passe &#224; la r&#232;gle suivante. Si des
      conditions sont pr&#233;sentes, mod_rewrite lance un bouclage
      secondaire afin de les traiter selon l'ordre dans lequel elles
      sont d&#233;finies. La logique de traitement des conditions est
      diff&#233;rente : on ne compare pas l'URL &#224; un mod&#232;le. Une cha&#238;ne de
      test <em>TestString</em> est tout d'abord &#233;labor&#233;e en d&#233;veloppant
      des variables, des r&#233;f&#233;rences arri&#232;res, des recherches dans des
      tables de correspondances, etc..., puis cette cha&#238;ne de test est
      compar&#233;e au mod&#232;le de condition <em>CondPattern</em>. Si le mod&#232;le
      ne correspond pas, les autres conditions du jeu ne sont pas
      examin&#233;es et la r&#232;gle correspondante ne s'applique pas. Si le
      mod&#232;le correspond, la condition suivante est examin&#233;e et ainsi de
      suite jusqu'&#224; la derni&#232;re condition. Si toutes les conditions sont
      satisfaites, le traitement de la r&#232;gle en cours se poursuit avec
      le remplacement de l'URL par la cha&#238;ne de <em>Substitution</em>.</p>

</div></div>
<div class="bottomlang">
<p><span>Langues Disponibles: </span><a href="../en/rewrite/tech.html" hreflang="en" rel="alternate" title="English">&nbsp;en&nbsp;</a> |
<a href="../fr/rewrite/tech.html" title="Fran&#231;ais">&nbsp;fr&nbsp;</a></p>
</div><div class="top"><a href="#page-header"><img src="../images/up.gif" alt="top" /></a></div><div class="section"><h2><a id="comments_section" name="comments_section">Commentaires</a></h2><div class="warning"><strong>Notice:</strong><br />This is not a Q&amp;A section. Comments placed here should be pointed towards suggestions on improving the documentation or server, and may be removed again by our moderators if they are either implemented or considered invalid/off-topic. Questions on how to manage the Apache HTTP Server should be directed at either our IRC channel, #httpd, on Libera.chat, or sent to our <a href="http://httpd.apache.org/lists.html">mailing lists</a>.</div>
<script type="text/javascript"><!--//--><![CDATA[//><!--
var comments_shortname = 'httpd';
var comments_identifier = 'http://httpd.apache.org/docs/2.2/rewrite/tech.html';
(function(w, d) {
    if (w.location.hostname.toLowerCase() == "httpd.apache.org") {
        d.write('<div id="comments_thread"><\/div>');
        var s = d.createElement('script');
        s.type = 'text/javascript';
        s.async = true;
        s.src = 'https://comments.apache.org/show_comments.lua?site=' + comments_shortname + '&page=' + comments_identifier;
        (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s);
    }
    else { 
        d.write('<div id="comments_thread">Comments are disabled for this page at the moment.<\/div>');
    }
})(window, document);
//--><!]]></script></div><div id="footer">
<p class="apache">Copyright 2018 The Apache Software Foundation.<br />Autoris&#233; sous <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>.</p>
<p class="menu"><a href="../mod/">Modules</a> | <a href="../mod/directives.html">Directives</a> | <a href="http://wiki.apache.org/httpd/FAQ">FAQ</a> | <a href="../glossary.html">Glossaire</a> | <a href="../sitemap.html">Plan du site</a></p></div><script type="text/javascript"><!--//--><![CDATA[//><!--
if (typeof(prettyPrint) !== 'undefined') {
    prettyPrint();
}
//--><!]]></script>
</body></html>